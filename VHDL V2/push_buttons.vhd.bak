
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
--use IEEE.STD_LOGIC_ARITH.ALL;
--use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity push_buttons is
    Port (	
				CLK : in  STD_LOGIC;
				RST : in  STD_LOGIC;
				
				-- I/O port bus
				PORT_CYC_I : in 	std_logic;
				PORT_STB_I : in 	std_logic;
				PORT_WE_I  : in 	std_logic;
				PORT_ACK_O : out 	std_logic;
				PORT_ADR_I : in	unsigned(7 downto 0);
				PORT_DAT_I : in 	std_logic_vector(7 downto 0);
				PORT_DAT_O : out 	std_logic_vector(7 downto 0);
				-- Interrupts
				INT_REQ 	  : out std_logic;
				INT_ACK 	  : in std_logic;
	 
				--Game keys
				keys		  : in std_logic_vector(1 downto 0) --start and pause key
				
				);
end push_buttons;

architecture behavioral of push_buttons is

--ID FOR PUSH BUTTONS
constant ID_FIRE_BUTTON: std_logic_vector(7 downto 0) := X"11";
constant ID_STR_BUTTON: std_logic_vector(7 downto 0) := X"12";

signal fire_pres, fire_next, str_pres, str_next  : std_logic;
signal int_ack_s : std_logic;
signal int_req_pres, int_req_next : std_logic;

begin
		--manejo de FFD y registros
		sequential : process(CLK, RST)
						 begin
							if(RST = '1') then
													fire_pres	 <= '0';
													str_pres 	 <= '0';
													int_req_pres <= '0';
							elsif(CLK'event and CLK = '1') then
													fire_pres  <= fire_next;
													str_pres <= str_next;
													int_req_pres <= int_req_next;
							end if;
						 end process sequential;
						 
		PORT_DAT_O <= fire_pres when (PORT_ADR_I = ID_STR_BUTTON and PORT_CYC_I = '1' and PORT_STB_I = '1' and PORT_WE_I = '0') else 
		           '0';		
		PORT_DAT_O <= str_pres when (PORT_ADR_I = ID_STR_BUTTON and PORT_CYC_I = '1' and PORT_STB_I = '1' and PORT_WE_I = '0') else 
		           '0';		

end behavioral;